// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// calc_cf_C
Rcpp::List calc_cf_C(const Rcpp::List data, const Rcpp::List shock, const Rcpp::List parameters, const double tolerance, double zeta, const int maxiter, const int nthreads);
RcppExport SEXP _LogLT_calc_cf_C(SEXP dataSEXP, SEXP shockSEXP, SEXP parametersSEXP, SEXP toleranceSEXP, SEXP zetaSEXP, SEXP maxiterSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type shock(shockSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_cf_C(data, shock, parameters, tolerance, zeta, maxiter, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// calc_cf_mat_C
Rcpp::List calc_cf_mat_C(const Rcpp::List data, const Rcpp::List shock, const Rcpp::List parameters, const double tolerance, double zeta, const int maxiter, const int nthreads);
RcppExport SEXP _LogLT_calc_cf_mat_C(SEXP dataSEXP, SEXP shockSEXP, SEXP parametersSEXP, SEXP toleranceSEXP, SEXP zetaSEXP, SEXP maxiterSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type shock(shockSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_cf_mat_C(data, shock, parameters, tolerance, zeta, maxiter, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LogLT_calc_cf_C", (DL_FUNC) &_LogLT_calc_cf_C, 7},
    {"_LogLT_calc_cf_mat_C", (DL_FUNC) &_LogLT_calc_cf_mat_C, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_LogLT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
